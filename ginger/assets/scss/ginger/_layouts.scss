
$row-units: 12;
$row-remaining-units: 0;
$row-remaining-columns: 0;
$row-display: block;
$row-columns: 0;
$row-gap: 0;

$cell-selector: ".cell";

$word-counts: (one:1, two:2, three:4, four:4, five:5, six:6,
          seven:7, eight:8, nine:9, ten:10, eleven:11, twelve:12,
           thirteen:13, fourteen:14, fifteen:15, sixteen:16, seventeen:17, eighteen:18, nineteen:19, twenty:20);

@function word-to-number($value){
  @return map-get($word-counts, $value);
}

%box{
  box-sizing: border-box;
  @include clearfix;
}

%container{
  @extend %box;
  list-style: none;
  padding: 0;
  margin: 0;
}

%cell{
  @extend %box;
}


@mixin grid-box($column-count, $gap:0, $dir:left, $height: null, $child:"*"){
  $total: $column-count;

  @extend %container;

  $pad: if($gap, $gap/1%, 0);

  & > #{$child}{
    @extend %cell;
    float: $dir;
    $available: (100 - (($total - 1)*$pad))/100;
    width: percentage($available/$total);

    @if $height{
      height: $height;
    }

    @if $gap > 0{
      margin-right: $gap;
      margin-bottom: $gap;
    }


    &:nth-child(#{$total}n+1):nth-last-child(-n+#{$total}),
      &:nth-child(#{$total}n+1):nth-last-child(-n+#{$total}) ~ #{$child} {
          margin-bottom: 0;
    }

    &:nth-child(#{$total}n+#{$total}){
        margin-right: 0;
    }
  }
}


@mixin row-box($units, $columns, $gap: 0){
  @extend %container;
  $row-units: $units;
  $row-remaining-units: $units;
  $row-columns: $columns;
  $row-gap: $gap;
  & > *:last-child{
      margin-right: 0;
  }
}

@mixin row-column($span: null){
  @extend %cell;
  @if $span == null{
    $span: $row-remaining-units;
  }
  $row-remaining-units: $row-remaining-units - $span;

  @if $row-remaining-units < 0{
    @error "Invalid columns number";
  }
  $gap: if($row-gap, $row-gap/100%, 0);
  $ratio: ($span/$row-units) * (1 - ($row-columns - 1) * $gap);
  width:percentage($ratio);
  margin-right: percentage($gap);
  float: left;
}



@mixin border-box($left: null, $right: null, $center: null, $gap:0){
  @extend %container;

  @if $left{
    & > #{$left}{
      float: left;
      @extend %cell;
      overflow: hidden;
      margin-right: $gap;
    }
  }

  @if $right{
    & > #{$right}{
      float: right;
      overflow: hidden;
      @extend %cell;
    }
  }

  @if $center {
    & > #{$center} {
      margin-right: auto;
      margin-left: auto;
      overflow: hidden;
      margin-right: $gap;
      @extend %cell;
    }
  }

}


@mixin overlaid($top: null, $bottom:null, $right: null, $left:null, $cover: null){
  position: relative;

  @if $top{
    & > #{$top}{
      left:0;
      right:0;
      top:0;
      position: absolute;
    }
  }

  @if $bottom{
    & > #{$bottom}{
      position: absolute;
      bottom:0;
      left:0;
      right:0;
    }
  }

  @if $right{
    & > #{$right}{
      position: absolute;
      top:0;
      bottom:0;
      right:0;
    }
  }

  @if $left{
    & > #{$left}{
      top:0;
      bottom:0;
      left:0;
      position: absolute;
    }
  }

  @if $cover{
    & > #{$cover}{
      left:0;
      right:0;
      top:0;
      bottom:0;
      position: absolute;
    }
  }

}

%flat-box{
  @extend %container;
  white-space: nowrap;
  overflow: hidden;
  text-align: justify;
  font-size: 0px;
}

@mixin flat-box($gap:0, $child:"*", $width:null){
  @extend %flat-box;

  & > #{$child}{
    display: inline-block;
    text-align: left;
    font-size: 1rem;

    @if $width{
      width: $width;
    }
    @if $gap{
      margin-right: $gap;
    }

    &:last-child{
      margin-right: 0;
    }
  }

}


@mixin stack-box($gap:0,$child:"*"){
  @extend %container;
  @if $gap{
    & > #{$child}{
      margin-bottom: $gap;
      &:last-child{
        margin-bottom: 0;
      }
    }
  }
}